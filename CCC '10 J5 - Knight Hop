#include <iostream>
#include <stdio.h>
#include <vector>
#include <queue>

using namespace std;

int main()
{
    int moves[8][2] = {{2, 1}, {2, -1}, {-2, 1}, {-2, -1}, {-1, 2}, {1, 2}, {-1, -2}, {1, -2}}; //PRE MOVE ARRAY TO MAKE IT EASIER TO GO THROUGH
    pair <int, int> strt; //PAIRS TO RECORD COORDINATES
    pair <int, int> ed; //
    int a, b, i, j;
    int mp[8][8];

    for(i=0; i<8; i++){ //INITIALIZING STEPS MAP
        for(j=0; j<8; j++){
            mp[i][j] = 0;
        }
    }

    queue <pair<int, int> > q;

    scanf(" %d %d", &a, &b);
    a--; //SINCE THE INPUT IS GIVEN WITH NUMBERS 1-8 INSTEAD OF 0 INDEX
    b--; //
    strt = make_pair(a, b);

    scanf(" %d %d", &a, &b);
    a--; //
    b--; //
    ed = make_pair(a, b);

    q.push(strt);
    mp[strt.first][strt.second] = 1; //STARTING POSITION AT 1 TO AVOID GOING BACK TO THE FIRST POSITION

    while(mp[ed.first][ed.second] == 0){
        strt = q.front();
        q.pop();
        for(i=0; i<8; i++){ //GOING THROUGH MOVE ARRAY AND ADDING ITS CHANGES TO THE CURRENT POSITION AND MAKING SURE ITS A VALID MOVE AND IT HASN'T VISITED THE SAME POSITION BEFORE
            if(strt.first+moves[i][0] >= 0 && strt.first+moves[i][0] <= 7 && strt.second+moves[i][1] >= 0 && strt.second+moves[i][1] <= 7 && mp[strt.first+moves[i][0]][strt.second+moves[i][1]] == 0){
                mp[strt.first+moves[i][0]][strt.second+moves[i][1]] = mp[strt.first][strt.second] + 1; //# OF STEPS TO THE NEXT POSITION IS THE # OF THE STEPS TO THE CURRENT POSITION + 1
                q.push(make_pair(strt.first+moves[i][0], strt.second+moves[i][1]));
            }
        }
    }

    printf("%d", mp[ed.first][ed.second]-1); //SINCE WE STARTED AT STEP 1, WE SUBTRACT 1 TO GET THE RIGHT NUMBER OF STEPS

    return 0;
}
