#include <iostream>
#include <stdio.h>
#include <queue>
#include <cmath>

using namespace std;

int main()
{
    int trps;
    int n;
    int i, j, k;
    pair <int, int> pos; //pair since its coordinates
    queue <pair <int, int> > q;

    scanf(" %d", &trps);

    for(i=0; i<trps; i++){
        scanf(" %d", &n);

        int mnt[n][n];
        int oxg[n][n];

        for(j=0; j<n; j++){
            for(k=0; k<n; k++){
                scanf(" %d", &mnt[k][j]);
                oxg[j][k] = -1; //Storing all oxygen as -1 since it will be adjusted as we go through the mountain
            }
        }

        q.push(make_pair(0, 0));
        oxg[0][0] = 0; //since the initial oxygen usage is 0

        while(!q.empty()){ //BFS
            pos = q.front();
            q.pop();

            if(pos.first+1 < n && abs(mnt[pos.first+1][pos.second]-mnt[pos.first][pos.second])<=2 && oxg[pos.first+1][pos.second] == -1){
                q.push(make_pair(pos.first+1, pos.second));
                if(mnt[pos.first+1][pos.second] > mnt[0][0] || mnt[pos.first][pos.second] > mnt[0][0]){ //Checking oxygen usage
                    oxg[pos.first+1][pos.second] = oxg[pos.first][pos.second] + 1; //Adding up total oxygen usage
                }else{
                    oxg[pos.first+1][pos.second] = oxg[pos.first][pos.second];
                }
            }

            if(pos.second+1 < n && abs(mnt[pos.first][pos.second+1]-mnt[pos.first][pos.second])<=2 && oxg[pos.first][pos.second+1] == -1){
                q.push(make_pair(pos.first, pos.second+1));
                if(mnt[pos.first][pos.second+1] > mnt[0][0] || mnt[pos.first][pos.second] > mnt[0][0]){ //Checking oxygen usage
                    oxg[pos.first][pos.second+1] = oxg[pos.first][pos.second] + 1; //Adding up total oxygen usage
                }else{
                    oxg[pos.first][pos.second+1] = oxg[pos.first][pos.second];
                }
            }

            if(pos.second-1 >= 0 && abs(mnt[pos.first][pos.second-1]-mnt[pos.first][pos.second])<=2 && oxg[pos.first][pos.second-1] == -1){
                q.push(make_pair(pos.first, pos.second-1));
                if(mnt[pos.first][pos.second-1] > mnt[0][0] || mnt[pos.first][pos.second] > mnt[0][0]){ //Checking oxygen usage
                    oxg[pos.first][pos.second-1] = oxg[pos.first][pos.second] + 1; //Adding up total oxygen usage
                }else{
                    oxg[pos.first][pos.second-1] = oxg[pos.first][pos.second];
                }
            }

            if(pos.first-1 >= 0 && abs(mnt[pos.first-1][pos.second]-mnt[pos.first][pos.second])<=2 && oxg[pos.first-1][pos.second] == -1){
                q.push(make_pair(pos.first-1, pos.second));
                if(mnt[pos.first-1][pos.second] > mnt[0][0] || mnt[pos.first][pos.second] > mnt[0][0]){ //Checking oxygen usage
                    oxg[pos.first-1][pos.second] = oxg[pos.first][pos.second] + 1; //Adding up total oxygen usage
                }else{
                    oxg[pos.first-1][pos.second] = oxg[pos.first][pos.second];
                }
            }

        }

        if(oxg[n-1][n-1] == -1){
            printf("CANNOT MAKE THE TRIP\n\n");
        }else{
            printf("%d\n\n", oxg[n-1][n-1]);
        }


    }

    return 0;
}
